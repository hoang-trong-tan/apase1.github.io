[
{
	"uri": "/2-prerequisites/self_paced/",
	"title": "...on your own",
	"tags": [],
	"description": "",
	"content": "\rThis workshop has been deprecated and archived. The new Amazon EKS Workshop is now available at www.eksworkshop.com.\nRunning the workshop on your own Only complete this section if you are running the workshop on your own. If you are at an AWS hosted event (such as re:Invent, Kubecon, Immersion Day, etc), go to Start the workshop at an AWS event.\n"
},
{
	"uri": "/2-prerequisites/self_paced/account/",
	"title": "Create an AWS account",
	"tags": [],
	"description": "",
	"content": "\rYour account must have the ability to create new IAM roles and scope other IAM permissions.\nIf you don’t already have an AWS account with Administrator access: create one now by clicking here\nOnce you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop\nEnter the user details:\nAttach the AdministratorAccess IAM Policy: Click to create the new user: Take note of the login URL and save: "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction to Kubernetes",
	"tags": [],
	"description": "",
	"content": "\nWelcome to the Amazon EKS Workshop!\nThe intent of this workshop is to educate users about the features of Amazon EKS.\nBackground in EKS, Kubernetes, Docker, and container workflows are not required, but they are recommended.\nThis chapter will introduce you to the basic workings of Kubernetes, laying the foundation for the hands-on portion of the workshop.\nSpecifically, we will walk you through the following topics:\nKubernetes (k8s) Basics Kubernetes Architecture Amazon EKS "
},
{
	"uri": "/",
	"title": "Introduction to Kubernetes",
	"tags": [],
	"description": "",
	"content": "INTRODUCTION TO KUBERNETES Để có nhiều nội dung liên quan đến container hơn, hãy kiểm tra trang sau: Containers from the Couch\nTrong workshop này, chúng ta sẽ tìm hiểu cách cấu hình VPC, ALB và EC2 Kubernetes workes và Dịch vụ Kubernetes Elastic của Amazon.\n"
},
{
	"uri": "/2-prerequisites/aws_event/",
	"title": "...at an AWS event",
	"tags": [],
	"description": "",
	"content": "Running the workshop at an AWS Event Only complete this section if you are at an AWS hosted event (such as re:Invent, Kubecon, Immersion Day, or any other event hosted by an AWS employee). If you are running the workshop on your own, go to:\nStart the workshop on your own.\n"
},
{
	"uri": "/2-prerequisites/aws_event/portal/",
	"title": "AWS Workshop Portal",
	"tags": [],
	"description": "",
	"content": "Login to AWS Workshop Portal This workshop creates an AWS account and a Cloud9 environment. You will need the Participant Hash provided upon entry, and your email address to track your unique session.\nConnect to the portal by clicking the button or browsing to https://dashboard.eventengine.run/. The following screen shows up.\nEnter the provided hash in the text box. The button on the bottom right corner changes to Accept Terms \u0026amp; Login. Click on that button to continue.\nClick on AWS Console on dashboard.\nTake the defaults and click on Open AWS Console. This will open AWS Console in a new browser tab.\nOnce you have completed the step above, you can head straight to Create a Workspace\n"
},
{
	"uri": "/2-prerequisites/workspace/",
	"title": "Create a Workspace",
	"tags": [],
	"description": "",
	"content": "\rThe Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user. Please ensure you are logged in as an IAM user, not the root account user.\nIf you are at an AWS Hosted Event the Cloud 9 Environment is already built for you. Just open the existing IDE in the Cloud9 console.\nA list of supported browsers for AWS Cloud9 is found here.\nAd blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted. Cloud9 requires third-party-cookies. You can whitelist the specific domains.\nLaunch Cloud9 in your closest region Singapore\nCreate a Cloud9 Environment: https://ap-southeast-1.console.aws.amazon.com/cloud9/home?region=ap-southeast-1\nSelect Create environment Name it eksworkshop, click Next. Choose t3.small for instance type, take all default values and click Create environment When it comes up, customize the environment by:\nClosing the Welcome tab Opening a new terminal tab in the main work area Closing the lower work area Your workspace should now look like this If you intend to run all the sections in this workshop, it will be useful to have more storage available for all the repositories and tests.\nIncrease the disk size on the Cloud9 instance The following command adds more disk space to the root volume of the EC2 instance that Cloud9 runs on. Once the command completes, we reboot the instance and it could take a minute or two for the IDE to come back online.\npip3 install --user --upgrade boto3\rexport instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\rpython -c \u0026#34;import boto3\rimport os\rfrom botocore.exceptions import ClientError ec2 = boto3.client(\u0026#39;ec2\u0026#39;)\rvolume_info = ec2.describe_volumes(\rFilters=[\r{\r\u0026#39;Name\u0026#39;: \u0026#39;attachment.instance-id\u0026#39;,\r\u0026#39;Values\u0026#39;: [\ros.getenv(\u0026#39;instance_id\u0026#39;)\r]\r}\r]\r)\rvolume_id = volume_info[\u0026#39;Volumes\u0026#39;][0][\u0026#39;VolumeId\u0026#39;]\rtry:\rresize = ec2.modify_volume( VolumeId=volume_id, Size=30\r)\rprint(resize)\rexcept ClientError as e:\rif e.response[\u0026#39;Error\u0026#39;][\u0026#39;Code\u0026#39;] == \u0026#39;InvalidParameterValue\u0026#39;:\rprint(\u0026#39;ERROR MESSAGE: {}\u0026#39;.format(e))\u0026#34;\rif [ $? -eq 0 ]; then\rsudo reboot\rfi "
},
{
	"uri": "/1-introduce/kubernetes_basics/",
	"title": "Kubernetes (K8s) Basics",
	"tags": [],
	"description": "",
	"content": "In this section, we’ll cover the following topics:\nWhat is Kubernetes Kubernetes Nodes K8s Objects Overview K8s Objects Detail (1/2) K8s Objects Detail (2/2) "
},
{
	"uri": "/2-prerequisites/",
	"title": "Start the workshop...",
	"tags": [],
	"description": "",
	"content": "GETTING STARTED To start the workshop, follow one of the following depending on whether you are…\n…running the workshop on your own (in your own account), or …attending an AWS hosted event (using AWS provided hashes)\nOnce you have completed with either setup, continue with Create a Workspace\n"
},
{
	"uri": "/2-prerequisites/k8stools/",
	"title": "Install Kubernetes Tools",
	"tags": [],
	"description": "",
	"content": "Amazon EKS clusters require kubectl and kubelet binaries and the aws-cli or aws-iam-authenticator binary to allow IAM authentication for your Kubernetes cluster.\nIn this workshop we will give you the commands to download the Linux binaries. If you are running Mac OSX / Windows, please see the official EKS docs for the download links.\nInstall kubectl Kubectl is a command-line tool for managing Kubernetes, allowing you to perform tasks such as deploy, scale, configure, and control various objects within a Kubernetes cluster. The main objects include Pods, Services, Deployments, and ReplicaSets. Kubectl also allows you to view logs, check status, and manage resources. With kubectl, you can control and monitor your applications in a Kubernetes environment with ease.\nsudo curl --silent --location -o /usr/local/bin/kubectl \\\rhttps://s3.us-west-2.amazonaws.com/amazon-eks/1.21.5/2022-01-21/bin/linux/amd64/kubectl\rsudo chmod +x /usr/local/bin/kubectl Update awscli Upgrade AWS CLI according to guidance in AWS documentation.\ncurl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34;\runzip awscliv2.zip\rsudo ./aws/install Install jq, envsubst (from GNU gettext utilities) and bash-completion sudo yum -y install jq gettext bash-completion moreutils Install yq for yaml processing echo \u0026#39;yq() {\rdocker run --rm -i -v \u0026#34;${PWD}\u0026#34;:/workdir mikefarah/yq \u0026#34;$@\u0026#34;\r}\u0026#39; | tee -a ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc Verify the binaries are in the path and executable for command in kubectl jq envsubst aws\rdo\rwhich $command \u0026amp;\u0026gt;/dev/null \u0026amp;\u0026amp; echo \u0026#34;$command in path\u0026#34; || echo \u0026#34;$command NOT FOUND\u0026#34;\rdone Enable kubectl bash_completion kubectl completion bash \u0026gt;\u0026gt; ~/.bash_completion\r. /etc/profile.d/bash_completion.sh\r. ~/.bash_completion set the AWS Load Balancer Controller version echo \u0026#39;export LBC_VERSION=\u0026#34;v2.4.1\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile\recho \u0026#39;export LBC_CHART_VERSION=\u0026#34;1.4.1\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile\r. ~/.bash_profile "
},
{
	"uri": "/1-introduce/kubernetes_architecture/",
	"title": "Kubernetes Architecture",
	"tags": [],
	"description": "",
	"content": "In this section, we’ll cover the following topics:\nKubernetes Architectural Control Plane Data Plane Kubernetes Cluster Setup "
},
{
	"uri": "/3-eksctl/",
	"title": "Launch using eksctl",
	"tags": [],
	"description": "",
	"content": "eksctl is a tool jointly developed by AWS and Weaveworks that automates much of the experience of creating EKS clusters.\nIn this module, we will use eksctl to launch and configure our EKS cluster and nodes.\n"
},
{
	"uri": "/3-eksctl/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "For this module, we need to download the eksctl binary:\ncurl --silent --location \u0026#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\u0026#34; | tar xz -C /tmp\rsudo mv -v /tmp/eksctl /usr/local/bin Confirm the eksctl command works:\neksctl version Enable eksctl bash-completion\nEnable eksctl bash-completion "
},
{
	"uri": "/1-introduce/kubernetes_basics/what_kubernetes/",
	"title": "What is Kubernetes",
	"tags": [],
	"description": "",
	"content": "\nBuilt on over a decade of experience and best practices Utilizes declarative configuration and automation Draws upon a large ecosystem of tools, services, support More information on what Kubernetes is all about can be found on the official Kubernetes website.\n"
},
{
	"uri": "/4-beginner/",
	"title": "Beginner",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/2-prerequisites/iamrole/",
	"title": "Create an IAM role for your Workspace",
	"tags": [],
	"description": "",
	"content": " Follow this deep link to create an IAM role with Administrator access. Confirm that AWS service and EC2 are selected, then click Next: Permissions to view permissions. Confirm that AdministratorAccess is checked, then click Next: Tags to assign tags. Take the defaults, and click Next: Review to review. Enter eksworkshop-admin for the Name, and click Create role. "
},
{
	"uri": "/4-beginner/dashboard/",
	"title": "Deploy the Kubernetes Dashboard",
	"tags": [],
	"description": "",
	"content": "In this Chapter, we will deploy the official Kubernetes dashboard, and connect through our Cloud9 Workspace.\n"
},
{
	"uri": "/4-beginner/dashboard/dashboard/",
	"title": "Deploy the Offical Kubernetes Dashboard",
	"tags": [],
	"description": "",
	"content": "The official Kubernetes dashboard is not deployed by default, but there are instructions in the official documentation\nWe can deploy the dashboard with the following command:\nexport DASHBOARD_VERSION=\u0026#34;v2.6.0\u0026#34;\rkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/${DASHBOARD_VERSION}/aio/deploy/recommended.yaml Since this is deployed to our private cluster, we need to access it via a proxy. kube-proxy is available to proxy our requests to the dashboard service. In your workspace, run the following command:\nkubectl proxy --port=8080 --address=0.0.0.0 --disable-filter=true \u0026amp; This will start the proxy, listen on port 8080, listen on all interfaces, and will disable the filtering of non-localhost requests.\nThis command will continue to run in the background of the current terminal’s session.\n"
},
{
	"uri": "/1-introduce/kubernetes_architecture/architecture_control_and_data_overview/",
	"title": "Kubernetes Architecture",
	"tags": [],
	"description": "",
	"content": "\n"
},
{
	"uri": "/1-introduce/kubernetes_basics/kubernetes_nodes/",
	"title": "Kubernetes nodes",
	"tags": [],
	"description": "",
	"content": "The machines that make up a Kubernetes cluster are called nodes.\nNodes in a Kubernetes cluster may be physical, or virtual.\nThere are two types of nodes:\nA Control-plane-node type, which makes up the Control Plane, acts as the “brains” of the cluster.\nA Worker-node type, which makes up the Data Plane, runs the actual container images (via pods).\nWe’ll dive deeper into how nodes interact with each other later in the presentation.\n"
},
{
	"uri": "/3-eksctl/launcheks/",
	"title": "Launch EKS",
	"tags": [],
	"description": "",
	"content": "\rDO NOT PROCEED with this step unless you have validated the IAM role in use by the Cloud9 IDE. You will not be able to run the necessary kubectl commands in the later modules unless the EKS cluster is built using the IAM role.\nCreate an EKS cluster eksctl version must be 0.58.0 or above to deploy EKS 1.21, click here to get the latest version.\nCreate an eksctl deployment file (eksworkshop.yaml) use in creating your cluster using the following syntax:\ncat \u0026lt;\u0026lt; EOF \u0026gt; eksworkshop.yaml\r---\rapiVersion: eksctl.io/v1alpha5\rkind: ClusterConfig\rmetadata:\rname: eksworkshop-eksctl\rregion: ${AWS_REGION}\rversion: \u0026#34;1.21\u0026#34;\ravailabilityZones: [\u0026#34;${AZS[0]}\u0026#34;, \u0026#34;${AZS[1]}\u0026#34;, \u0026#34;${AZS[2]}\u0026#34;]\rmanagedNodeGroups:\r- name: nodegroup\rdesiredCapacity: 3\rinstanceType: t3.small\rssh:\renableSsm: true\r# To enable all of the control plane logs, uncomment below:\r# cloudWatch:\r# clusterLogging:\r# enableTypes: [\u0026#34;*\u0026#34;]\rsecretsEncryption:\rkeyARN: ${MASTER_ARN}\rEOF Next, use the file you created as the input for the eksctl cluster creation.\nWe are deliberatly launching at least one Kubernetes version behind the latest available. Please review Amazon EKS Kubernetes versions to determine what supported versions are currently available. This allows you to perform the cluster upgrade lab.\neksctl create cluster -f eksworkshop.yaml Launching EKS and all the dependencies will take approximately 15 minutes\n"
},
{
	"uri": "/4-beginner/dashboard/connect/",
	"title": "Access the Dashboard",
	"tags": [],
	"description": "",
	"content": "Now we can access the Kubernetes Dashboard\nIn your Cloud9 environment, click Tools / Preview / Preview Running Application Scroll to the end of the URL and append:\n/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ The Cloud9 Preview browser doesn’t appear to support the token authentication, so once you have the login screen in the cloud9 preview browser tab, press the Pop Out button to open the login screen in a regular browser tab, like below:\nOpen a New Terminal Tab and enter\naws eks get-token --cluster-name eksworkshop-eksctl | jq -r \u0026#39;.status.token\u0026#39; Copy the output of this command and then click the radio button next to Token then in the text field below paste the output from the last command.\nThen press Sign In\n"
},
{
	"uri": "/1-introduce/amazon_eks/",
	"title": "Amazon EKS",
	"tags": [],
	"description": "",
	"content": "In this section, we’ll cover the following topics:\nEKS Cluster Creation Workflow What happens when you create your EKS cluster EKS Architecture for Control plane and Worker node communication High Level Amazon EKS! "
},
{
	"uri": "/2-prerequisites/ec2instance/",
	"title": "Attach the IAM role to your Workspace",
	"tags": [],
	"description": "",
	"content": " Click the grey circle button (in top right corner) and select Manage EC2 Instance. Select the instance, then choose Actions / Security / Modify IAM Role Choose eksworkshop-admin from the IAM Role drop down, and select Save "
},
{
	"uri": "/1-introduce/kubernetes_architecture/architecture_control/",
	"title": "Control Plane",
	"tags": [],
	"description": "",
	"content": "\nOne or More API Servers: Entry point for REST / kubectl\netcd: Distributed key/value store\nController-manager: Always evaluating current vs desired state\nScheduler: Schedules pods to worker nodes\nCheck out the official Kubernetes documentation for a more in-depth explanation of control plane components.\n"
},
{
	"uri": "/1-introduce/kubernetes_architecture/architecture_worker/",
	"title": "Data Plane",
	"tags": [],
	"description": "",
	"content": "\nMade up of worker nodes\nkubelet: Acts as a conduit between the API server and the node\nkube-proxy: Manages IP translation and routing\nCheck out the official Kubernetes documentation for a more in-depth explanation of data plane components.\n"
},
{
	"uri": "/1-introduce/amazon_eks/eks_customers/",
	"title": "EKS Cluster Creation Workflow",
	"tags": [],
	"description": "",
	"content": "\n"
},
{
	"uri": "/1-introduce/kubernetes_basics/k8s_overviews/",
	"title": "Kubernetes Overview",
	"tags": [],
	"description": "",
	"content": "Kubernetes objects are entities that are used to represent the state of the cluster.\nAn object is a “record of intent” – once created, the cluster does its best to ensure it exists as defined. This is known as the cluster’s “desired state.”\nKubernetes is always working to make an object’s “current state” equal to the object’s “desired state.” A desired state can describe:\nWhat pods (containers) are running, and on which nodes IP endpoints that map to a logical group of containers How many replicas of a container are running And much more… Let’s explain these k8s objects in a bit more detail..\n"
},
{
	"uri": "/3-eksctl/test/",
	"title": "Test the Cluster",
	"tags": [],
	"description": "",
	"content": "Test the cluster: Confirm your nodes:\nkubectl get nodes # if we see our 3 nodes, we know we have authenticated correctly Update the kubeconfig file to interact with you cluster: aws eks update-kubeconfig --name eksworkshop-eksctl --region ${AWS_REGION} Export the Worker Role Name for use throughout the workshop: STACK_NAME=$(eksctl get nodegroup --cluster eksworkshop-eksctl -o json | jq -r \u0026#39;.[].StackName\u0026#39;)\rROLE_NAME=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME | jq -r \u0026#39;.StackResources[] | select(.ResourceType==\u0026#34;AWS::IAM::Role\u0026#34;) | .PhysicalResourceId\u0026#39;)\recho \u0026#34;export ROLE_NAME=${ROLE_NAME}\u0026#34; | tee -a ~/.bash_profile Congratulations! You now have a fully working Amazon EKS Cluster that is ready to use! Before you move on to any other labs, make sure to complete the steps on the next page to update the EKS Console Credentials.\n"
},
{
	"uri": "/1-introduce/amazon_eks/eks_control_plane/",
	"title": "What happens when you create your EKS cluster",
	"tags": [],
	"description": "",
	"content": "\n"
},
{
	"uri": "/4-beginner/dashboard/cleanup/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": "Stop the proxy and delete the dashboard deployment\n# kill proxy\rpkill -f \u0026#39;kubectl proxy --port=8080\u0026#39;\r# delete dashboard\rkubectl delete -f https://raw.githubusercontent.com/kubernetes/dashboard/${DASHBOARD_VERSION}/aio/deploy/recommended.yaml\runset DASHBOARD_VERSION "
},
{
	"uri": "/1-introduce/kubernetes_basics/k8s_detail_1/",
	"title": "K8s Objects Detail (1/2)",
	"tags": [],
	"description": "",
	"content": "Pod When an application is packaged, it can run in an isolated container. Although we can run isolated containers like starting a monolithic application, Kubernetes does not work that way. Kubernetes uses the concept of a pod to group containers together. A pod is a group of containers that share resources and network, and containers within a pod can communicate with each other as if on a single server while still maintaining necessary isolation.\nDaemonSet A DaemonSet is a type of service management that operates on Pods with a rather unique function by ensuring that the service Pod will run on all nodes in a Kubernetes Cluster. (Or on specific nodes within the **Kubernetes**.\nDeployment In Kubernetes, the Deployment object is the main entity responsible for deploying and managing our application. It allows us to deploy Pods, update Pods, rollback Pods, and ReplicaSets..\n"
},
{
	"uri": "/1-introduce/kubernetes_basics/k8s_detail_2/",
	"title": "K8s Objects Detail (2/2)",
	"tags": [],
	"description": "",
	"content": "ReplicaSet A ReplicaSet is a controller that ensures the stability of replicas (number and state of PODs, replicas) while running.\nJob When deploying and operating systems, we will have many tasks (Jobs) that need to be performed periodically or once. Jobs run in K8s will execute within Pods. Pods will be created when a Job runs and will end when the Job is successful. When a Job is deleted, the related Pods will also be deleted..\nService A Kubernetes service is a resource that defines a set of pods or a group of pods providing the same service and access policy to those pods. For services, Kubernetes also provides various types of services to cater to different requirements in the IT industry.\nLabel Labels in Kubernetes are key-value pairs that are assigned to objects within the cluster such as Pods, and they are used to quickly identify and categorize these objects. They allow us to add descriptive metadata to our objects and perform operations based on those labels, such as grouping and selecting objects based on specific criteria.\n"
},
{
	"uri": "/2-prerequisites/workspaceiam/",
	"title": "Update IAM settings for your Workspace",
	"tags": [],
	"description": "",
	"content": "\rCloud9 normally manages IAM credentials dynamically. This isn’t currently compatible with the EKS IAM authentication, so we will disable it and rely on the IAM role instead.\nTo ensure temporary credentials aren’t already in place we will remove any existing credentials file as well as disabling AWS managed temporary credentials:\naws cloud9 update-environment --environment-id $C9_PID --managed-credentials-action DISABLE\rrm -vf ${HOME}/.aws/credentials We should configure our aws cli with our current region as default.\nIf you are at an AWS event, ask your instructor which AWS region to use.\nexport ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)\rexport AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r \u0026#39;.region\u0026#39;)\rexport AZS=($(aws ec2 describe-availability-zones --query \u0026#39;AvailabilityZones[].ZoneName\u0026#39; --output text --region $AWS_REGION)) Check if AWS_REGION is set to desired region\ntest -n \u0026#34;$AWS_REGION\u0026#34; \u0026amp;\u0026amp; echo AWS_REGION is \u0026#34;$AWS_REGION\u0026#34; || echo AWS_REGION is not set Let’s save these into bash_profile\necho \u0026#34;export ACCOUNT_ID=${ACCOUNT_ID}\u0026#34; | tee -a ~/.bash_profile\recho \u0026#34;export AWS_REGION=${AWS_REGION}\u0026#34; | tee -a ~/.bash_profile\recho \u0026#34;export AZS=(${AZS[@]})\u0026#34; | tee -a ~/.bash_profile\raws configure set default.region ${AWS_REGION}\raws configure get default.region Validate the IAM role Use the GetCallerIdentity CLI command to validate that the Cloud9 IDE is using the correct IAM role.\naws sts get-caller-identity --query Arn | grep eksworkshop-admin -q \u0026amp;\u0026amp; echo \u0026#34;IAM role valid\u0026#34; || echo \u0026#34;IAM role NOT valid\u0026#34; If the IAM role is not valid, DO NOT PROCEED. Go back and confirm the steps on this page.\n"
},
{
	"uri": "/2-prerequisites/clone/",
	"title": "Clone the Service Repos",
	"tags": [],
	"description": "",
	"content": "cd ~/environment\rgit clone https://github.com/aws-containers/ecsdemo-frontend.git\rgit clone https://github.com/aws-containers/ecsdemo-nodejs.git\rgit clone https://github.com/aws-containers/ecsdemo-crystal.git "
},
{
	"uri": "/3-eksctl/console/",
	"title": "Console Credentials",
	"tags": [],
	"description": "",
	"content": "This step is optional, as nearly all of the workshop content is CLI-driven. But, if you’d like full access to your workshop cluster in the EKS console this step is recommended.\nThe EKS console allows you to see not only the configuration aspects of your cluster, but also to view Kubernetes cluster objects such as Deployments, Pods, and Nodes. For this type of access, the console IAM User or Role needs to be granted permission within the cluster.\nBy default, the credentials used to create the cluster are automatically granted these permissions. Following along in the workshop, you’ve created a cluster using temporary IAM credentials from within Cloud9. This means that you’ll need to add your AWS Console credentials to the cluster\nImport your EKS Console credentials to your new cluster: IAM Users and Roles are bound to an EKS Kubernetes cluster via a ConfigMap named aws-auth. We can use eksctl to do this with one command.\nYou’ll need to determine the correct credential to add for your AWS Console access. If you know this already, you can skip ahead to the eksctl create iamidentitymapping step below.\nIf you’ve built your cluster from Cloud9 as part of this tutorial, invoke the following within your environment to determine your IAM Role or User ARN.\nc9builder=$(aws cloud9 describe-environment-memberships --environment-id=$C9_PID | jq -r \u0026#39;.memberships[].userArn\u0026#39;)\rif echo ${c9builder} | grep -q user; then\rrolearn=${c9builder}\recho Role ARN: ${rolearn}\relif echo ${c9builder} | grep -q assumed-role; then\rassumedrolename=$(echo ${c9builder} | awk -F/ \u0026#39;{print $(NF-1)}\u0026#39;)\rrolearn=$(aws iam get-role --role-name ${assumedrolename} --query Role.Arn --output text) echo Role ARN: ${rolearn}\rfi With your ARN in hand, you can issue the command to create the identity mapping within the cluster.\neksctl create iamidentitymapping --cluster eksworkshop-eksctl --arn ${rolearn} --group system:masters --username admin Note that permissions can be restricted and granular but as this is a workshop cluster, you’re adding your console credentials as administrator.\nNow you can verify your entry in the AWS auth map within the console.\nkubectl describe configmap -n kube-system aws-auth Now you’re all set to move on. For more information, check out the EKS documentation on this topic.\n"
},
{
	"uri": "/1-introduce/amazon_eks/eks_high_architecture/",
	"title": "EKS Architecture for Control plane and Worker Node communication",
	"tags": [],
	"description": "",
	"content": "\n"
},
{
	"uri": "/1-introduce/kubernetes_architecture/cluster_setup_options/",
	"title": "Kubernetes Cluster Setup",
	"tags": [],
	"description": "",
	"content": "In addition to the managed Amazon EKS solution, there are many tools available to help bootstrap and configure a self-managed Kubernetes cluster. They include:\nMinikube – Development and Learning Kops – Learning, Development, Production Kubeadm – Learning, Development, Production Docker for Mac - Learning, Development Kubernetes IN Docker - Learning, Development Alongside these open source solutions, there are also many commercial options available.\nLet’s take a look at Amazon EKS!\n"
},
{
	"uri": "/2-prerequisites/kmskey/",
	"title": "Create an AWS KMS Custom Managed Key (CMK)",
	"tags": [],
	"description": "",
	"content": "Create a CMK for the EKS cluster to use when encrypting your Kubernetes secrets:\naws kms create-alias --alias-name alias/eksworkshop --target-key-id $(aws kms create-key --query KeyMetadata.Arn --output text) Let’s retrieve the ARN of the CMK to input into the create cluster command.\nexport MASTER_ARN=$(aws kms describe-key --key-id alias/eksworkshop --query KeyMetadata.Arn --output text) We set the MASTER_ARN environment variable to make it easier to refer to the KMS key later.\nNow, let’s save the MASTER_ARN environment variable into the bash_profile\necho \u0026#34;export MASTER_ARN=${MASTER_ARN}\u0026#34; | tee -a ~/.bash_profile "
},
{
	"uri": "/1-introduce/amazon_eks/eks_high_level/",
	"title": "High Level",
	"tags": [],
	"description": "",
	"content": "Once your EKS cluster is ready, you get an API endpoint and you’d use Kubectl, community developed tool to interact with your cluster.\n"
},
{
	"uri": "/1-introduce/amazon_eks/stay_tuned/",
	"title": "Amazon EKS!",
	"tags": [],
	"description": "",
	"content": "Hãy tiếp tục theo dõi chúng ta sẽ đi tiếp mô-đun tiếp theo ngay sau đây!\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]